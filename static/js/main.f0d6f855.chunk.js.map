{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","propType","PropTypes","string","isRequired","Formulario","ciudadRef","React","createRef","paisRef","buscaClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","id","type","ref","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarInfo","_this$props$resultado","resultado","name","weather","main","urlIcono","concat","icon","alt","temp","toFixed","src","App","state","error","consulta","consultaApi","_this$state$consulta","url","fetch","then","json","datos","setState","catch","console","log","prevProps","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0d6f855.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <div>\r\n            <nav className='nav-wrapper light-blue darken-2'>\r\n                <a className='brand-logo'>\r\n                    {props.titulo}\r\n                </a>\r\n            </nav>\r\n            \r\n        </div>\r\n    );\r\n};\r\nHeader.propType = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n    \r\n    // crear los refs\r\n    ciudadRef = React.createRef();\r\n    paisRef = React.createRef();\r\n\r\n    buscaClima = (e) => {\r\n        e.preventDefault();\r\n        //console.log('Clic submit');\r\n        \r\n        // enviar por props\r\n\r\n        const respuesta = {\r\n            ciudad: this.ciudadRef.current.value,\r\n            pais: this.paisRef.current.value\r\n        }\r\n\r\n        // resetear el form\r\n        //e.currentTarget.reset();\r\n        //console.log(respuesta);\r\n        this.props.datosConsulta(respuesta);\r\n    }\r\n   \r\n    render() { \r\n        \r\n        return ( \r\n            <div className='contenedor-form'>\r\n                <div className='container'>\r\n                    <div className='row'>\r\n                        <form onSubmit= {this.buscaClima}>\r\n                            <div className='input-field col s12 m8 l4 offset-m2'>\r\n                                <input id='ciudad' type='text' ref={this.ciudadRef} />\r\n                                <label htmlFor='ciudad'>Ciudad: </label>\r\n\r\n                            </div>\r\n                            <div className='input-field col s12 m8 l4 offset-m2'>\r\n                                <select id='pais' ref={this.paisRef} >\r\n                                    <option value='' defaultValue></option>\r\n                                    <option value='AR'>Argentina</option>\r\n                                    <option value='CO'>Colombia</option>\r\n                                    <option value='CR'>Costa Rica</option>\r\n                                    <option value='ES'>España</option>\r\n                                    <option value='US'>Estado Unidos</option>\r\n                                    <option value='MX'>Mexico</option>\r\n                                    <option value='PE'>Peru</option>\r\n                                </select>\r\n                                <label htmlFor='pais'>País: </label>\r\n                            </div>\r\n                            <div className='input-field col s12 m8 l4 offset-m2 buscador'>\r\n                                <input type='submit' className='waves-effect waves-light btn-large yellow accent-4' value='Buscar...' />\r\n                            </div>\r\n\r\n                            <div className='input-field col s12 m8 l4 offset-m2 error'>\r\n                                \r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\nFormulario.propTypes = {\r\n    datosConsulta: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = (props) => {\r\n    return(\r\n        <div className='container'>\r\n            <div className='row'>\r\n                <div className='col s12 m6 offset-m3 '>\r\n                    <div className='card-panel red darken-4 error'>\r\n                        {props.mensaje}\r\n                    </div> \r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\nexport default Error;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n//import { types } from '@babel/core';\r\n\r\nclass Clima extends Component {\r\n\r\n    mostrarInfo = () => {\r\n        const {name, weather, main} = this.props.resultado;\r\n        if(!name || !weather || !main) return null;\r\n        const kelvin = 273.15;\r\n        let urlIcono = `https://openweathermap.org/img/wn/${weather[0].icon}.png`;\r\n        let alt = `Clima de ${name}`;\r\n\r\n        return (\r\n            <div className='row'>\r\n                <div className='container'>\r\n                    <div className='col resultado s12 m8 l6 offset-m2 offset-l3'>\r\n                        <div className='card-panel light-blue align-center'>\r\n                            <h2>\r\n                                Resultado Clima de: {name}\r\n                            \r\n                            </h2>\r\n                            <p className='temperatura'>\r\n                                Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\r\n                                <img src={urlIcono} alt={alt} />\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    } \r\n\r\n\r\n\r\n    render() { \r\n        //console.log( this.props.resultado);\r\n        return ( \r\n            <div className='container'>\r\n                {this.mostrarInfo()}\r\n\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nClima.propTypes = {\r\n    resultado: PropTypes.object.isRequired\r\n}\r\nexport default Clima;","import React, {Component} from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from './componentes/Error';\nimport Clima from './componentes/Clima';\n\nclass App extends Component {\n  state = {\n    error: false,\n    consulta: {},\n    resultado: {}\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if(prevState.consulta !== this.state.consulta){\n      this.consultaApi(); \n    }\n  }\n\n  consultaApi = () => {\n    const {ciudad, pais} = this.state.consulta;\n    //console.log(ciudad);\n\n    if(!ciudad || !pais) return null;\n\n    // leer la url y agregar el API key\n    const apiID = 'fb393bb1a9fbcbd4ef342bf3175a1dd5';\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&APPID=${apiID}`;\n    \n    //console.log(url);\n    // query con fetch api\n    fetch(url)\n      .then(respuesta => {\n        //console.log(respuesta)\n        return respuesta.json()\n      })\n      .then( datos => {\n        this.setState({\n          resultado: datos\n        })\n      })\n      .catch( error => {\n        console.log(error);\n      })\n\n    // consultar con fetch\n\n  }\n  \n  datosConsulta = respuesta => {\n    //console.log(respuesta);\n\n    if (respuesta.ciudad === '' || respuesta.pais === ''){\n      this.setState({\n        error: true\n      })\n\n    }else{\n      \n      this.setState({\n        error: false,\n        consulta: respuesta\n      })\n\n    }\n  }\n  render() { \n    const {error} = this.state.error,\n          {cod} = this.state.resultado;\n          \n    \n    let resultado;\n    if(error){\n      resultado = <Error mensaje='Ambos campos son obligatorios' />\n    } else if(cod === \"404\"){\n      resultado = <Error mensaje='El valor escrito no tiene ningún resultado.' />\n    }\n    else {\n      resultado = <Clima  resultado = { this.state.resultado } />\n    }\n    return ( \n      <div className='App'>\n        <Header titulo = 'Clima React' />\n        <Formulario datosConsulta = {this.datosConsulta} />\n        {resultado}\n      </div>\n     );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}